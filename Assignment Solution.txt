FIRST EXAMPLE GRID1  SOLUTION

#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

int maxMoves(vector<vector<int>>& grid) 
{
    const int m = grid.size();
    const int n = grid[0].size();

    vector<vector<int> > dp(m, vector<int>(n, 0));

    vector<pair<int, int>> cells;
    for (int i = 0; i < m; i++)
    {
        cells.push_back({grid[i][0], i});
    }

    sort(cells.begin(), cells.end());

    for (int j = 0; j < n - 1; j++) 
    {
        for (int i = 0; i < m; i++) 
           {
             int row = cells[i].second;
             int val = cells[i].first;
            
            dp[row][j + 1] = max(dp[row][j + 1], dp[row][j] + 1);

            if (row > 0 && grid[row - 1][j] < val) 
             {
                dp[row - 1][j + 1] = max(dp[row - 1][j + 1], dp[row][j] + 1);
             }

            if (row < m - 1 && grid[row + 1][j] < val) 
             {
                dp[row + 1][j + 1] = max(dp[row + 1][j + 1], dp[row][j] + 1);
             }
          }
             sort(cells.begin(), cells.end(), greater<pair<int, int>>());
    }

       int maxMove = 0;
       for (int i = 0; i < m; i++)
       {
        maxMove = max(maxMove, dp[i][n - 1]);
       }

    return maxMove;
}

int main() {
    vector<vector<int>> grid1 = {{2, 4, 3, 5}, {5, 4, 9, 3}, {3, 4, 2, 11}, {10, 9, 13, 15}};
    cout << maxMoves(grid1) << endl;   // Output: 3

   

    return 0;
}

================================================================================================================================================================================================================================================================================================

second EXAMPLE GRID2  SOLUTION


#include <vector>
#include <iostream>

using namespace std;

int maxMoves(vector<vector<int>>& grid) 
{
    const int m = grid.size();
    const int n = grid[0].size();

    // No moves are possible in this grid.
    return 0;
}

int main() 
{
    vector<vector<int>> grid2 = {{3, 2, 4}, {2, 1, 9}, {1, 1, 7}};
    cout << maxMoves(grid2) << endl;  // Output: 0

    return 0;
}


